{
	"@@locale": "en",
	"httpBadRequest": "We couldn't process your request. Please check your information and try again.",
	"@httpBadRequest": {
		"description": "HTTP 400 Bad Request - The server cannot or will not process the request due to something that is perceived to be a client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing)."
	},
	"httpUnauthorized": "Please sign in to continue.",
	"@httpUnauthorized": {
		"description": "HTTP 401 Unauthorized - Although the HTTP standard specifies 'unauthorized', semantically this response means 'unauthenticated'. That is, the client must authenticate itself to get the requested response."
	},
	"httpPaymentRequired": "This feature requires a subscription. Please upgrade your plan to continue.",
	"@httpPaymentRequired": {
		"description": "HTTP 402 Payment Required - The initial purpose of this code was for digital payment systems, however this status code is rarely used and no standard convention exists."
	},
	"httpForbidden": "You don't have access to this feature. Contact support if you believe this is an error.",
	"@httpForbidden": {
		"description": "HTTP 403 Forbidden - The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike `401 Unauthorized`, the client's identity is known to the server."
	},
	"httpNotFound": "We couldn't find what you're looking for. It may have been moved or deleted.",
	"@httpNotFound": {
		"description": "HTTP 404 Not Found - The server cannot find the requested resource. In the browser, this means the URL is not recognized. In an API, this can also mean that the endpoint is valid but the resource itself does not exist. Servers may also send this response instead of `403 Forbidden` to hide the existence of a resource from an unauthorized client."
	},
	"httpMethodNotAllowed": "This action isn't supported. Please try a different approach.",
	"@httpMethodNotAllowed": {
		"description": "HTTP 405 Method Not Allowed - The request method is known by the server but is not supported by the target resource. For example, an API may not allow `DELETE` on a resource, or the `TRACE` method entirely."
	},
	"httpNotAcceptable": "The format you requested isn't available. Please try a different format.",
	"@httpNotAcceptable": {
		"description": "HTTP 406 Not Acceptable - This response is sent when the web server, after performing server-driven content negotiation, doesn't find any content that conforms to the criteria given by the user agent."
	},
	"httpProxyAuthRequired": "Proxy authentication is required. Please configure your network settings.",
	"@httpProxyAuthRequired": {
		"description": "HTTP 407 Proxy Authentication Required - This is similar to 401 Unauthorized but authentication is needed to be done by a proxy"
	},
	"httpRequestTimeout": "Your request took too long to complete. Please try again with a stable connection.",
	"@httpRequestTimeout": {
		"description": "HTTP 408 Request Timeout - This response is sent on an idle connection by some servers, even without any previous request by the client. It means that the server would like to shut down this unused connection. This response is used much more since some browsers use HTTP pre-connection mechanisms to speed up browsing. Some servers may shut down a connection without sending this message."
	},
	"httpConflict": "This change conflicts with recent updates. Please refresh and try again.",
	"@httpConflict": {
		"description": "HTTP 409 Conflict - This response is sent when a request conflicts with the current state of the server. In WebDAV remote web authoring, `409` responses are errors sent to the client so that a user might be able to resolve a conflict and resubmit the request."
	},
	"httpGone": "This content is no longer available and won't be coming back.",
	"@httpGone": {
		"description": "HTTP 410 Gone - This response is sent when the requested content has been permanently deleted from server, with no forwarding address. Clients are expected to remove their caches and links to the resource. The HTTP specification intends this status code to be used for 'limited-time, promotional services'. APIs should not feel compelled to indicate resources that have been deleted with this status code."
	},
	"httpLengthRequired": "Your request is missing required information. Please try again.",
	"@httpLengthRequired": {
		"description": "HTTP 411 Length Required - Server rejected the request because the `Content-Length` header field is not defined and the server requires it."
	},
	"httpPreconditionFailed": "The conditions for this operation weren't met. Please refresh and try again.",
	"@httpPreconditionFailed": {
		"description": "HTTP 412 Precondition Failed - In conditional requests, the client has indicated preconditions in its headers which the server does not meet."
	},
	"httpPayloadTooLarge": "Your file or data is too large. Please reduce the size and try again.",
	"@httpPayloadTooLarge": {
		"description": "HTTP 413 Payload Too Large - Request entity is larger than limits defined by server. The server might close the connection or return a Retry-After header field."
	},
	"httpUriTooLong": "The link is too long for us to process. Please use a shorter URL.",
	"@httpUriTooLong": {
		"description": "HTTP 414 URI Too Long - The URI requested by the client is longer than the server is willing to interpret."
	},
	"httpUnsupportedMediaType": "This file type isn't supported. Please use a different format.",
	"@httpUnsupportedMediaType": {
		"description": "HTTP 415 Unsupported Media Type - The media format of the requested data is not supported by the server, so the server is rejecting the request."
	},
	"httpRangeNotSatisfiable": "The requested portion isn't available. Please try downloading the complete file.",
	"@httpRangeNotSatisfiable": {
		"description": "HTTP 416 Range Not Satisfiable - The ranges specified by the `Range` header field in the request cannot be fulfilled. It's possible that the range is outside the size of the target resource's data."
	},
	"httpExpectationFailed": "We couldn't meet the requirements for your request. Please try a different approach.",
	"@httpExpectationFailed": {
		"description": "HTTP 417 Expectation Failed - This response code means the expectation indicated by the `Expect` request header field cannot be met by the server."
	},
	"httpImATeapot": "This endpoint is taking a coffee break. â˜• Please try a different one.",
	"@httpImATeapot": {
		"description": "HTTP 418 I'm a teapot - The server refuses the attempt to brew coffee with a teapot."
	},
	"httpMisdirectedRequest": "Your request reached the wrong destination. We're redirecting you to the correct location.",
	"@httpMisdirectedRequest": {
		"description": "HTTP 421 Misdirected Request - The request was directed at a server that is not able to produce a response. This can be sent by a server that is not configured to produce responses for the combination of scheme and authority that are included in the request URI."
	},
	"httpUnprocessableEntity": "We understand your request, but can't process it. Please check the details and try again.",
	"@httpUnprocessableEntity": {
		"description": "HTTP 422 Unprocessable Entity - The request was well-formed but was unable to be followed due to semantic errors."
	},
	"httpLocked": "This item is currently being edited by someone else. Please try again in a moment.",
	"@httpLocked": {
		"description": "HTTP 423 Locked - The resource that is being accessed is locked."
	},
	"httpFailedDependency": "A related operation failed. Please start over and try again.",
	"@httpFailedDependency": {
		"description": "HTTP 424 Failed Dependency - The request failed due to failure of a previous request."
	},
	"httpTooEarly": "It's too early to process this request. Please wait a moment and try again.",
	"@httpTooEarly": {
		"description": "HTTP 425 Too Early - Indicates that the server is unwilling to risk processing a request that might be replayed."
	},
	"httpUpgradeRequired": "Please update your app to the latest version to continue.",
	"@httpUpgradeRequired": {
		"description": "HTTP 426 Upgrade Required - The server refuses to perform the request using the current protocol but might be willing to do so after the client upgrades to a different protocol. The server sends an `Upgrade` header in a 426 response to indicate the required protocol(s)."
	},
	"httpPreconditionRequired": "This operation requires additional verification. Please try again.",
	"@httpPreconditionRequired": {
		"description": "HTTP 428 Precondition Required - The origin server requires the request to be conditional. This response is intended to prevent the 'lost update' problem, where a client `GET`s a resource's state, modifies it and `PUT`s it back to the server, when meanwhile a third party has modified the state on the server, leading to a conflict."
	},
	"httpTooManyRequests": "You've exceeded the maximum number of attempts. Please wait a moment and try again.",
	"@httpTooManyRequests": {
		"description": "HTTP 429 Too Many Requests - The user has sent too many requests in a given amount of time (rate limiting)."
	},
	"httpRequestHeaderFieldsTooLarge": "Your request contains too much information. Please simplify and try again.",
	"@httpRequestHeaderFieldsTooLarge": {
		"description": "HTTP 431 Request Header Fields Too Large - The server is unwilling to process the request because its header fields are too large. The request may be resubmitted after reducing the size of the request header fields."
	},
	"httpUnavailableForLegalReasons": "This content isn't available in your region due to legal restrictions.",
	"@httpUnavailableForLegalReasons": {
		"description": "HTTP 451 Unavailable For Legal Reasons - The user agent requested a resource that cannot legally be provided, such as a web page censored by a government."
	},
	"httpInternalServerError": "Something went wrong on our end. We're looking into it. Please try again later.",
	"@httpInternalServerError": {
		"description": "HTTP 500 Internal Server Error - The server has encountered a situation it does not know how to handle. This error is generic, indicating that the server cannot find a more appropriate `5XX` status code to respond with."
	},
	"httpNotImplemented": "This feature isn't available yet. We're working on it! ðŸš§",
	"@httpNotImplemented": {
		"description": "HTTP 501 Not Implemented - The request method is not supported by the server and cannot be handled. The only methods that servers are required to support (and therefore that must not return this code) are `GET` and `HEAD`."
	},
	"httpBadGateway": "We're having trouble connecting to our services. Please try again in a few moments.",
	"@httpBadGateway": {
		"description": "HTTP 502 Bad Gateway - This error response means that the server, while working as a gateway to get a response needed to handle the request, got an invalid response."
	},
	"httpServiceUnavailable": "We're temporarily down for maintenance. We'll be back shortly! ðŸ”§",
	"@httpServiceUnavailable": {
		"description": "HTTP 503 Service Unavailable - The server is not ready to handle the request. Common causes are a server that is down for maintenance or that is overloaded. Note that together with this response, a user-friendly page explaining the problem should be sent. This response should be used for temporary conditions and the `Retry-After` HTTP header should, if possible, contain the estimated time before the recovery of the service. The webmaster must also take care about the caching-related headers that are sent along with this response, as these temporary condition responses should usually not be cached."
	},
	"httpGatewayTimeout": "Our services are taking longer than expected. Please try again in a moment.",
	"@httpGatewayTimeout": {
		"description": "HTTP 504 Gateway Timeout - This error response is given when the server is acting as a gateway and cannot get a response in time."
	},
	"httpVersionNotSupported": "Your connection method isn't supported. Please update your app or browser.",
	"@httpVersionNotSupported": {
		"description": "HTTP 505 HTTP Version Not Supported - The HTTP version used in the request is not supported by the server"
	},
	"httpVariantAlsoNegotiates": "We encountered a configuration issue. Please contact support.",
	"@httpVariantAlsoNegotiates": {
		"description": "HTTP 506 Variant Also Negotiates - The server has an internal configuration error: during content negotiation, the chosen variant is configured to engage in content negotiation itself, which results in circular references when creating responses."
	},
	"httpInsufficientStorage": "We're running low on storage space. Please try again later or contact support.",
	"@httpInsufficientStorage": {
		"description": "HTTP 507 Insufficient Storage - The method could not be performed on the resource because the server is unable to store the representation needed to successfully complete the request."
	},
	"httpLoopDetected": "We detected a problem processing your request. Please contact support if this continues.",
	"@httpLoopDetected": {
		"description": "HTTP 508 Loop Detected - The server detected an infinite loop while processing the request."
	},
	"httpNotExtended": "Additional configuration is required. Please contact support for assistance.",
	"@httpNotExtended": {
		"description": "HTTP 510 Not Extended - The client request declares an HTTP Extension (RFC 2774) that should be used to process the request, but the extension is not supported."
	},
	"httpNetworkAuthRequired": "Network authentication is required. Please connect to your network and try again.",
	"@httpNetworkAuthRequired": {
		"description": "HTTP 511 Network Authentication Required - Indicates that the client needs to authenticate to gain network access"
	},
	"serviceTemporarilyUnavailable": "Service is temporarily unavailable. Please try again later.",
	"@serviceTemporarilyUnavailable": {
		"description": "Error shown when the service is temporarily unavailable"
	},
	"invalidEmailOrPassword": "Invalid email or password. Please try again.",
	"@invalidEmailOrPassword": {
		"description": "Error shown when login credentials are incorrect"
	},
	"invalidEmailFormat": "Please enter a valid email address.",
	"@invalidEmailFormat": {
		"description": "Error shown when email format is invalid"
	},
	"nonCompliantPassword": "Password must be between 8 and 4096 characters length and must contain a combination of uppercase, lowercase, and numbers.",
	"@nonCompliantPassword": {
		"description": "Error shown when password does not meet password policies"
	},
	"weakPassword": "Password must comply with our password policy.",
	"@weakPassword": {
		"description": "Error shown when password doesn't comply with password policy"
	},
	"accountDisabled": "This account has been disabled. Please contact support.",
	"@accountDisabled": {
		"description": "Error shown when user account is disabled"
	},
	"tooManyAttempts": "Too many unsuccessful attempts. Please try again later.",
	"@tooManyAttempts": {
		"description": "Error shown when too many attempts have been made"
	},
	"authenticationFailed": "Authentication failed. Please try again.",
	"@authenticationFailed": {
		"description": "Generic error for authentication failures"
	},
	"tryAgain": "Something went wrong. Please try again.",
	"@tryAgain": {
		"description": "Generic error with retry suggestion"
	},
	"networkConnectionError": "Network connection error. Please check your internet connection.",
	"@networkConnectionError": {
		"description": "Error shown when there's no internet connection"
	},
	"sessionExpired": "Your session has expired. Please sign in again.",
	"@sessionExpired": {
		"description": "Error shown when user session expires"
	},
	"registeredEmail": "This email is already registered. Please use a different email or try to sign in.",
	"@registeredEmail": {
		"description": "Error shown when email is already registered during signup"
	},
	"requiredField": "This field is required.",
	"@requiredField": {
		"description": "Error shown for empty required fields"
	},
	"notFound": "The specified data could not be found.",
	"@notFound": {
		"description": "Error message shown when a value for the specified SharedPreferences key is not found"
	},
	"signInWithEmailLinkSuccessfully": "You're signed in successfully. Now, set your password to finish your account setup.",
	"@signInWithEmailLinkSuccessfully": {
		"description": "Message shown when sign-in with email link succeeds"
	},
	"home": "Home",
	"@home": {
		"description": "Label for the Home tab in NavigationBar and NavigationRail"
	},
	"sample": "Sample",
	"@sample": {
		"description": "Label for the Sample tab in NavigationBar and NavigationRail"
	},
	"signInScreenDescription": "A comprehensive demo screen showcasing Firebase services.",
	"@signInScreenDescription": {
		"description": "Description for the Firebase page"
	},
	"localStorageScreenDescription": "A comprehensive demo screen showcasing local storages.",
	"@localStorageScreenDescription": {
		"description": "Description for the Local Storage page"
	},
	"email": "Email",
	"@email": {
		"description": "Email"
	},
	"password": "Password",
	"@password": {
		"description": "Password"
	},
	"forgotPassword": "Forgot Password?",
	"@forgotPassword": {
		"description": "Forgot Password?"
	},
	"enterEmailForPasswordReset": "We'll send you a link to the email address you signed up with.",
	"@enterEmailForPasswordReset": {
		"description": "Description text displayed on forgot password screen"
	},
	"submit": "Submit",
	"@submit": {
		"description": "Submit"
	},
	"signIn": "Sign In",
	"@signIn": {
		"description": "Sign In"
	},
	"signUp": "Sign Up",
	"@signUp": {
		"description": "Sign Up"
	},
	"signUpDescription": "Create an account and verify your details to dive into Sandbox.",
	"@signUpDescription": {
		"description": "Description text displayed on the sign up screen to encourage users to create an account"
	},
	"sentSignUpVerificationEmail": "A verification email has been sent. Please complete your registration by clicking the verification URL in the email.",
	"@sentSignUpVerificationEmail": {
		"description": "Message shown after sending a verification email, instructing the user to complete registration via the link in the email"
	},
	"invalidVerificationEmailLink": "This verification link is invalid or has expired. Please request a new verification email.",
	"@invalidVerificationEmailLink": {
		"description": "Error message shown when the email link is invalid or expired during sign-in with email link"
	},
	"confirmPassword": "Confirm password",
	"@confirmPassword": {
		"description": "Hint text for password confirmation field"
	},
	"passwordMismatch": "Passwords do not match.",
	"@passwordMismatch": {
		"description": "Error message shown when password and confirm password fields do not match"
	},
	"passwordMinLength": "Minimum 8 characters",
	"@passwordMinLength": {
		"description": "Password requirement message indicating the minimum character length"
	},
	"passwordMaxLength": "Maximum 4096 characters",
	"@passwordMaxLength": {
		"description": "Password requirement message indicating the maximum character length"
	},
	"atLeastOneUppercaseLetter": "At least one UPPERCASE letter",
	"@atLeastOneUppercaseLetter": {
		"description": "Password requirement message for uppercase letter validation"
	},
	"atLeastOneLowercaseLetter": "At least one lowercase letter",
	"@atLeastOneLowercaseLetter": {
		"description": "Password requirement message for lowercase letter validation"
	},
	"atLeastOneDigit": "At least one digit",
	"@atLeastOneDigit": {
		"description": "Password requirement message for numeric character validation"
	},
	"setUpPassword": "Set up Password",
	"@setUpPassword": {
		"description": "Set up Password"
	},
	"authScreenDescription": "A comprehensive demo screen showcasing Firebase Auth.",
	"@authScreenDescription": {
		"description": "Description for the Auth page"
	},
	"displayName": "Display Name",
	"@displayName": {
		"description": "Display Name"
	},
	"phoneNumber": "Phone Number",
	"@phoneNumber": {
		"description": "Phone Number"
	},
	"photoURL": "Photo URL",
	"@photoURL": {
		"description": "Photo URL"
	},
	"uid": "UID",
	"@uid": {
		"description": "UID"
	},
	"refreshToken": "Refresh Token",
	"@refreshToken": {
		"description": "Refresh Token"
	},
	"tenantId": "Tenant ID",
	"@tenantId": {
		"description": "Tenant ID"
	},
	"createdAt": "Created at",
	"@createdAt": {
		"description": "Created at"
	},
	"lastSignInAt": "Last sign in at",
	"@lastSignInAt": {
		"description": "Last sign in at"
	},
	"providerId": "Provider ID",
	"@providerId": {
		"description": "Provider ID"
	},
	"anonymousUser": "Anonymous user",
	"@anonymousUser": {
		"description": "Anonymous user"
	},
	"emailVerified": "Email Verified",
	"@emailVerified": {
		"description": "Email Verified"
	},
	"emailUnverified": "Email Unverified",
	"@emailUnverified": {
		"description": "Email Unverified"
	},
	"signInProvider": "Sign-in Provider",
	"@signInProvider": {
		"description": "Sign-in Provider"
	},
	"signInSecondFactor": "Sign-in second factor",
	"@signInSecondFactor": {
		"description": "Sign-in second factor"
	},
	"authenticatedAt": "Authenticated at",
	"@authenticatedAt": {
		"description": "Authenticated at"
	},
	"idToken": "ID token",
	"@idToken": {
		"description": "ID token"
	},
	"payloadClaims": "Payload claims",
	"@payloadClaims": {
		"description": "Payload claims"
	},
	"retry": "Retry",
	"@retry": {
		"description": "Retry"
	},
	"issuedAt": "Issued at",
	"@issuedAt": {
		"description": "Issued at"
	},
	"expiredAt": "Expired at",
	"@expiredAt": {
		"description": "Expired at"
	},
	"dataConnectScreenDescription": "A comprehensive demo screen showcasing Firebase Data Connect.",
	"@dataConnectScreenDescription": {
		"description": "Description for the Data Connect page"
	},
	"settings": "Settings",
	"@settings": {
		"description": "Label for the Settings tab in NavigationBar and NavigationRail"
	},
	"info": "Info",
	"@info": {
		"description": "Information"
	},
	"success": "Success",
	"@success": {
		"description": "Success"
	},
	"warning": "Warning",
	"@warning": {
		"description": "Warning"
	},
	"error": "Error",
	"@error": {
		"description": "Error"
	}
}